/**
 * This class is generated by jOOQ
 */
package com.icfolson.aem.monitoring.database.generated.tables;


import com.icfolson.aem.monitoring.database.generated.Keys;
import com.icfolson.aem.monitoring.database.generated.Monitoring;
import com.icfolson.aem.monitoring.database.generated.tables.records.EventTypeRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.6"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class EventType extends TableImpl<EventTypeRecord> {

    private static final long serialVersionUID = 1489898847;

    /**
     * The reference instance of <code>MONITORING.EVENT_TYPE</code>
     */
    public static final EventType EVENT_TYPE = new EventType();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EventTypeRecord> getRecordType() {
        return EventTypeRecord.class;
    }

    /**
     * The column <code>MONITORING.EVENT_TYPE.EVENT_TYPE_ID</code>.
     */
    public final TableField<EventTypeRecord, Short> EVENT_TYPE_ID = createField("EVENT_TYPE_ID", org.jooq.impl.SQLDataType.SMALLINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("(NEXT VALUE FOR MONITORING.SYSTEM_SEQUENCE_E243D0CD_A7C6_45BB_BF5F_713FF0567BE8)", org.jooq.impl.SQLDataType.SMALLINT)), this, "");

    /**
     * The column <code>MONITORING.EVENT_TYPE.EVENT_NAME</code>.
     */
    public final TableField<EventTypeRecord, String> EVENT_NAME = createField("EVENT_NAME", org.jooq.impl.SQLDataType.VARCHAR.length(256).nullable(false), this, "");

    /**
     * Create a <code>MONITORING.EVENT_TYPE</code> table reference
     */
    public EventType() {
        this("EVENT_TYPE", null);
    }

    /**
     * Create an aliased <code>MONITORING.EVENT_TYPE</code> table reference
     */
    public EventType(String alias) {
        this(alias, EVENT_TYPE);
    }

    private EventType(String alias, Table<EventTypeRecord> aliased) {
        this(alias, aliased, null);
    }

    private EventType(String alias, Table<EventTypeRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Monitoring.MONITORING;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<EventTypeRecord, Short> getIdentity() {
        return Keys.IDENTITY_EVENT_TYPE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<EventTypeRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_5;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<EventTypeRecord>> getKeys() {
        return Arrays.<UniqueKey<EventTypeRecord>>asList(Keys.CONSTRAINT_5, Keys.UNIQUE_EVENT_TYPE_NAME);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public EventType as(String alias) {
        return new EventType(alias, this);
    }

    /**
     * Rename this table
     */
    public EventType rename(String name) {
        return new EventType(name, null);
    }
}
