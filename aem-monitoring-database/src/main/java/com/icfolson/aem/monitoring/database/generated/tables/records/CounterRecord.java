/**
 * This class is generated by jOOQ
 */
package com.icfolson.aem.monitoring.database.generated.tables.records;


import com.icfolson.aem.monitoring.database.generated.tables.Counter;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record2;
import org.jooq.Row2;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.6"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CounterRecord extends UpdatableRecordImpl<CounterRecord> implements Record2<Short, String> {

    private static final long serialVersionUID = -1975105456;

    /**
     * Setter for <code>MONITORING.COUNTER.COUNTER_ID</code>.
     */
    public void setCounterId(Short value) {
        set(0, value);
    }

    /**
     * Getter for <code>MONITORING.COUNTER.COUNTER_ID</code>.
     */
    public Short getCounterId() {
        return (Short) get(0);
    }

    /**
     * Setter for <code>MONITORING.COUNTER.COUNTER_NAME</code>.
     */
    public void setCounterName(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>MONITORING.COUNTER.COUNTER_NAME</code>.
     */
    public String getCounterName() {
        return (String) get(1);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Record1<Short> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record2 type implementation
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Row2<Short, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Row2<Short, String> valuesRow() {
        return (Row2) super.valuesRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Short> field1() {
        return Counter.COUNTER.COUNTER_ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field2() {
        return Counter.COUNTER.COUNTER_NAME;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Short value1() {
        return getCounterId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value2() {
        return getCounterName();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CounterRecord value1(Short value) {
        setCounterId(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CounterRecord value2(String value) {
        setCounterName(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CounterRecord values(Short value1, String value2) {
        value1(value1);
        value2(value2);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached CounterRecord
     */
    public CounterRecord() {
        super(Counter.COUNTER);
    }

    /**
     * Create a detached, initialised CounterRecord
     */
    public CounterRecord(Short counterId, String counterName) {
        super(Counter.COUNTER);

        set(0, counterId);
        set(1, counterName);
    }
}
