// automatically generated by the FlatBuffers compiler, do not modify

package com.icfolson.aem.monitoring.serialization.generated;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class CounterValue extends Table {
  public static CounterValue getRootAsCounterValue(ByteBuffer _bb) { return getRootAsCounterValue(_bb, new CounterValue()); }
  public static CounterValue getRootAsCounterValue(ByteBuffer _bb, CounterValue obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__init(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public CounterValue __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; return this; }

  public long timestamp() { int o = __offset(4); return o != 0 ? bb.getLong(o + bb_pos) : 0; }
  public String name(int j) { int o = __offset(6); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int nameLength() { int o = __offset(6); return o != 0 ? __vector_len(o) : 0; }
  public int value() { int o = __offset(8); return o != 0 ? bb.getInt(o + bb_pos) : 0; }

  public static int createCounterValue(FlatBufferBuilder builder,
      long timestamp,
      int nameOffset,
      int value) {
    builder.startObject(3);
    CounterValue.addTimestamp(builder, timestamp);
    CounterValue.addValue(builder, value);
    CounterValue.addName(builder, nameOffset);
    return CounterValue.endCounterValue(builder);
  }

  public static void startCounterValue(FlatBufferBuilder builder) { builder.startObject(3); }
  public static void addTimestamp(FlatBufferBuilder builder, long timestamp) { builder.addLong(0, timestamp, 0); }
  public static void addName(FlatBufferBuilder builder, int nameOffset) { builder.addOffset(1, nameOffset, 0); }
  public static int createNameVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startNameVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addValue(FlatBufferBuilder builder, int value) { builder.addInt(2, value, 0); }
  public static int endCounterValue(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
}

