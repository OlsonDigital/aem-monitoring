// automatically generated by the FlatBuffers compiler, do not modify

package com.icfolson.aem.monitoring.serialization.generated;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class Event extends Table {
  public static Event getRootAsEvent(ByteBuffer _bb) { return getRootAsEvent(_bb, new Event()); }
  public static Event getRootAsEvent(ByteBuffer _bb, Event obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__init(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public Event __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; return this; }

  public long timestamp() { int o = __offset(4); return o != 0 ? bb.getLong(o + bb_pos) : 0; }
  public String name() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer nameAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public EventProperty properties(int j) { return properties(new EventProperty(), j); }
  public EventProperty properties(EventProperty obj, int j) { int o = __offset(8); return o != 0 ? obj.__init(__indirect(__vector(o) + j * 4), bb) : null; }
  public int propertiesLength() { int o = __offset(8); return o != 0 ? __vector_len(o) : 0; }

  public static int createEvent(FlatBufferBuilder builder,
      long timestamp,
      int nameOffset,
      int propertiesOffset) {
    builder.startObject(3);
    Event.addTimestamp(builder, timestamp);
    Event.addProperties(builder, propertiesOffset);
    Event.addName(builder, nameOffset);
    return Event.endEvent(builder);
  }

  public static void startEvent(FlatBufferBuilder builder) { builder.startObject(3); }
  public static void addTimestamp(FlatBufferBuilder builder, long timestamp) { builder.addLong(0, timestamp, 0); }
  public static void addName(FlatBufferBuilder builder, int nameOffset) { builder.addOffset(1, nameOffset, 0); }
  public static void addProperties(FlatBufferBuilder builder, int propertiesOffset) { builder.addOffset(2, propertiesOffset, 0); }
  public static int createPropertiesVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startPropertiesVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static int endEvent(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
}

